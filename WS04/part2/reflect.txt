/***********************************************************************
// Workshop 4 Part 2
// Module: Reflect
// File: reflect.txt
// Version 1.0
// Author
// Description
//	Name      : David Andres Sanchez Umbarila
//	Student ID: 140273228
//	Email     : dasanchez-umbarila@myseneca.ca
//
//	I have done all the coding by myself and only copied the code
//	 that my professor provided to complete my workshops and
//	 assignments.
// Revision History
// -----------------------------------------------------------
// Name                 Date            Reason
***********************************************************************/
During this workshop we implemented different types of interactions 
between classes like composition and aggregation, memory management 
with the use of copy and move operators, and the use of the string 
library.
In first place, the main case of composition presented was the Child 
— Toy relationship since it had full control of their lifetime true the 
dynamic array of these dynamic objects, meaning a strong ownership 
relationship. On the other hand, the ConfirmOrder class has an 
aggregation relationship with the Toy class because it only maintains 
pointers to Toy objects without owning them.
In terms of memory allocation we had two methods copy functions and move
functions. While, the copy generated a new object with its independent 
resources and is not affected by the original. The move functions transfer 
resources form an object to another, reducing the amount of copies in 
the program. The Implementation of these methods varies dependent on the 
type of relationship: composition prefers the transfer of ownership, 
aggregation choose to copy the resources to have full control on them.